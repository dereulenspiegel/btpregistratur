package de.akuz.android.btpregistratur.dao;

import de.akuz.android.btpregistratur.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PATIENT.
 */
public class Patient {

    private Long id;
    /** Not-null value. */
    private String firstName;
    /** Not-null value. */
    private String lastName;
    private String gender;
    private java.util.Date birthday;
    /** Not-null value. */
    private java.util.Date arrival;
    private java.util.Date leave;
    private String uniqueId;
    private String comment;
    private String transportCallSign;
    /** Not-null value. */
    private String streetAddress;
    private Long operationId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PatientDao myDao;

    private Operation operation;
    private Long operation__resolvedKey;


    public Patient() {
    }

    public Patient(Long id) {
        this.id = id;
    }

    public Patient(Long id, String firstName, String lastName, String gender, java.util.Date birthday, java.util.Date arrival, java.util.Date leave, String uniqueId, String comment, String transportCallSign, String streetAddress, Long operationId) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.gender = gender;
        this.birthday = birthday;
        this.arrival = arrival;
        this.leave = leave;
        this.uniqueId = uniqueId;
        this.comment = comment;
        this.transportCallSign = transportCallSign;
        this.streetAddress = streetAddress;
        this.operationId = operationId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPatientDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getFirstName() {
        return firstName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /** Not-null value. */
    public String getLastName() {
        return lastName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public java.util.Date getBirthday() {
        return birthday;
    }

    public void setBirthday(java.util.Date birthday) {
        this.birthday = birthday;
    }

    /** Not-null value. */
    public java.util.Date getArrival() {
        return arrival;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setArrival(java.util.Date arrival) {
        this.arrival = arrival;
    }

    public java.util.Date getLeave() {
        return leave;
    }

    public void setLeave(java.util.Date leave) {
        this.leave = leave;
    }

    public String getUniqueId() {
        return uniqueId;
    }

    public void setUniqueId(String uniqueId) {
        this.uniqueId = uniqueId;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public String getTransportCallSign() {
        return transportCallSign;
    }

    public void setTransportCallSign(String transportCallSign) {
        this.transportCallSign = transportCallSign;
    }

    /** Not-null value. */
    public String getStreetAddress() {
        return streetAddress;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStreetAddress(String streetAddress) {
        this.streetAddress = streetAddress;
    }

    public Long getOperationId() {
        return operationId;
    }

    public void setOperationId(Long operationId) {
        this.operationId = operationId;
    }

    /** To-one relationship, resolved on first access. */
    public Operation getOperation() {
        Long __key = this.operationId;
        if (operation__resolvedKey == null || !operation__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OperationDao targetDao = daoSession.getOperationDao();
            Operation operationNew = targetDao.load(__key);
            synchronized (this) {
                operation = operationNew;
            	operation__resolvedKey = __key;
            }
        }
        return operation;
    }

    public void setOperation(Operation operation) {
        synchronized (this) {
            this.operation = operation;
            operationId = operation == null ? null : operation.getId();
            operation__resolvedKey = operationId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
