package de.akuz.android.btpregistratur.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.akuz.android.btpregistratur.dao.Operation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OPERATION.
*/
public class OperationDao extends AbstractDao<Operation, Long> {

    public static final String TABLENAME = "OPERATION";

    /**
     * Properties of entity Operation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StartDate = new Property(1, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(2, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property OperationNumber = new Property(3, String.class, "operationNumber", false, "OPERATION_NUMBER");
        public final static Property BtpAddress = new Property(4, String.class, "btpAddress", false, "BTP_ADDRESS");
    };


    public OperationDao(DaoConfig config) {
        super(config);
    }
    
    public OperationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OPERATION' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'START_DATE' INTEGER," + // 1: startDate
                "'END_DATE' INTEGER," + // 2: endDate
                "'OPERATION_NUMBER' TEXT," + // 3: operationNumber
                "'BTP_ADDRESS' TEXT);"); // 4: btpAddress
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_OPERATION__id ON OPERATION" +
                " (_id);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OPERATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Operation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(2, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(3, endDate.getTime());
        }
 
        String operationNumber = entity.getOperationNumber();
        if (operationNumber != null) {
            stmt.bindString(4, operationNumber);
        }
 
        String btpAddress = entity.getBtpAddress();
        if (btpAddress != null) {
            stmt.bindString(5, btpAddress);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Operation readEntity(Cursor cursor, int offset) {
        Operation entity = new Operation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // startDate
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // endDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // operationNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // btpAddress
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Operation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setEndDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setOperationNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBtpAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Operation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Operation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
